#!/bin/bash

exit_code=0

branch=$(git rev-parse --abbrev-ref HEAD)

if [ $branch = "master" ]; then
    # test last commit
    files=$(git diff --name-only HEAD..HEAD~1)
else
    # test all different namespaces from master
    files=$(git diff --name-only origin/master)
fi

function files_to_namespaces () {
    files=$1
    filter=$2
    echo "$files" \
        | grep '^src\|^test' \
        | grep -v '^src\/aoc\/instrument\.cljc' \
        | grep "$filter" \
        | sed 's/^src\///' \
        | sed 's/^test\///' \
        | sed 's/\.cljc$//' \
        | sed 's/\//\./g'
}

function namespaces_to_opts () {
    namespaces=$1
    echo "$namespaces" \
        | tr '\r\n' '#' \
        | echo "#$(cat -)" \
        | sed 's/#$//' \
        | sed 's/#/ -n /g'
}

if [ $CI ]; then
    rm -rf out
    mkdir -p out
    touch out/scores.edn
fi

echo "==== Performing tests on different CLJ and CLJS namespaces"

clj_namespaces=$(files_to_namespaces "${files[@]}" "cljc\?")

if [ -z "$clj_namespaces" ]; then
    echo -e "\n==== No differing CLJ namespaces, nothing to test."
else
    echo "==== Running CLJ tests on JVM"
    echo -e "\nFound differing CLJ namespaces:\n$clj_namespaces"
    ns_opts=$(namespaces_to_opts "${clj_namespaces[@]}")
    clj_cmd="clojure -J-Xmx3200m -R:test:test-clj -e (require,'patch.clj-2443) -m cognitect.test-runner -d src $ns_opts"
    $clj_cmd
fi

if [ $? != 0 ]; then
    exit_code=1
fi

cljs_namespaces=$(files_to_namespaces "${files[@]}" "clj[cs]")

if [ -z "$cljs_namespaces" ]; then
    echo -e "\n==== No differing CLJS namespaces, nothing to test."
else
    echo -e "\n==== Compiling CLJS and running tests on Node"
    echo -e "\nFound differing CLJS namespaces:\n$cljs_namespaces"
    rm -rf cljs-test-runner-out
    mkdir -p cljs-test-runner-out/gen
    ns_opts=$(namespaces_to_opts "${cljs_namespaces[@]}")
    cljs_cmd="clojure -A:test:test-cljs -d src -c cljs-opts.edn -e skip-cljs $ns_opts"
    $cljs_cmd
fi

if [ $? != 0 ]; then
    exit_code=1
fi

#### Store scores
if [ "$CIRCLE_USERNAME" = "borkdude" ] && [ ! -z "$(cat out/scores.edn)" ]; then
    (ssh-keyscan -H 178.21.118.237 -H michielborkent.nl >> ~/.ssh/known_hosts) 2> /dev/null
    update_query=$(clojure .circleci/print-query.clj "update" out/scores.edn)
    updated=$(ssh aoc@michielborkent.nl "psql -d aoc -c \"$update_query\"")
    score_query=$(clojure .circleci/print-query.clj "select" out/scores.edn)
    scores=$(ssh aoc@michielborkent.nl "psql -d aoc -c \"$score_query\"")
fi

#### Optional instrumented tests
timeout="$(command -v timeout)"
if [ -z $timeout ]; then
    timeout="$(command -v gtimeout)"
fi

if [ -z $timeout ]; then
    echo "WARNING: timeout program not found, running without it\n"
else
    timeout_cmd="$timeout 80"
fi

if [ -z "$clj_namespaces" ]; then
    :
else
    echo -e "\n==== Running instrumented CLJ tests on JVM with timeout of 60 seconds"
    ns_opts=$(namespaces_to_opts "${clj_namespaces[@]}")
    clj_cmd="clojure -J-Xmx3200m -R:test:test-clj -e (require,'patch.clj-2443) -m cognitect.test-runner -d src $ns_opts -n aoc.instrument"
    $timeout_cmd $clj_cmd
fi

if [ -z "$cljs_namespaces" ]; then
    :
else
    echo -e "\n==== Running instrumented CLJS tests on Node with timeout of 60 seconds"
    ns_opts=$(namespaces_to_opts "${cljs_namespaces[@]}")
    cljs_cmd="clojure -A:test:test-cljs -d src -c cljs-opts.edn -e skip-cljs $ns_opts -n aoc.instrument"
    $timeout_cmd $cljs_cmd
fi

#### Finally, print score table
if [ ! -z "$scores" ]; then
    echo -e "\n==== Scores:\n$scores"
fi

exit "$exit_code"
